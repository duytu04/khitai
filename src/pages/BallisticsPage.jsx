import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Autocomplete,
  TextField,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  Box,
  Typography,
  Rating,
  Tooltip,
} from '@mui/material';
import { styled } from '@mui/material/styles';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

// D·ªØ li·ªáu m·∫´u
const weapons = [
  {
    id: 1,
    name: 'AK-47',
    type: 'S√∫ng tr∆∞·ªùng t·∫•n c√¥ng',
    range: '400m',
    fireRate: '600 vi√™n/ph√∫t',
    weight: '4.3kg',
    ammo: '7.62x39mm',
    fireMode: 'Li√™n t·ª•c / b√°n t·ª± ƒë·ªông',
    origin: 'Li√™n X√¥',
    note: 'B·ªÅn b·ªâ, d·ªÖ b·∫£o tr√¨',
    pros: 'ƒê·ªô b·ªÅn cao, d·ªÖ s·ª≠a ch·ªØa',
    cons: 'Gi·∫≠t m·∫°nh, n·∫∑ng',
    rating: 4,
    image: 'https://via.placeholder.com/150',
  },
  {
    id: 2,
    name: 'M16A4',
    type: 'S√∫ng tr∆∞·ªùng t·∫•n c√¥ng',
    range: '550m',
    fireRate: '750 vi√™n/ph√∫t',
    weight: '3.9kg',
    ammo: '5.56x45mm NATO',
    fireMode: 'B√°n t·ª± ƒë·ªông / 3 vi√™n',
    origin: 'M·ªπ',
    note: 'Nh·∫π, ch√≠nh x√°c cao',
    pros: 'T·∫ßm b·∫Øn xa, √≠t gi·∫≠t',
    cons: 'D·ªÖ k·∫πt ƒë·∫°n n·∫øu b·ª•i b·∫©n',
    rating: 5,
    image: 'https://via.placeholder.com/150',
  },
];

// Styled components
const ComparisonTable = styled(TableContainer)(({ theme }) => ({
  backgroundColor: '#1B263B',
  borderRadius: '10px',
  marginTop: theme.spacing(2),
  overflowX: 'auto',
  '&::-webkit-scrollbar': {
    height: '8px',
  },
  '&::-webkit-scrollbar-thumb': {
    backgroundColor: '#4CAF50',
    borderRadius: '4px',
  },
  '&::-webkit-box-shadow': {
    backgroundColor: '#0D1B2A',
  },
}));

const TableHeader = styled(TableCell)(({ theme }) => ({
  backgroundColor: '#2E7D32',
  color: '#FFFFFF',
  fontWeight: 'bold',
  textAlign: 'center',
  padding: theme.spacing(1.5),
  border: '1px solid #B0BEC5',
}));

const TableData = styled(TableCell)(({ theme }) => ({
  color: '#FFFFFF',
  textAlign: 'center',
  padding: theme.spacing(1.5),
  border: '1px solid #B0BEC5',
  verticalAlign: 'middle',
}));

const ActionButton = styled(Button)(({ theme }) => ({
  margin: theme.spacing(1),
  textTransform: 'none',
}));

const BallisticsPage = () => {
  const navigate = useNavigate();
  const [selectedWeapons, setSelectedWeapons] = useState([]);

  // X·ª≠ l√Ω ch·ªçn v≈© kh√≠
  const handleWeaponChange = (event, newValue) => {
    if (newValue.length <= 3) {
      setSelectedWeapons(newValue);
    }
  };

  // L∆∞u b·ªô so s√°nh
  const handleSaveComparison = () => {
    localStorage.setItem('selectedWeapons', JSON.stringify(selectedWeapons.map((w) => w.name)));
    alert('B·ªô so s√°nh ƒë√£ ƒë∆∞·ª£c l∆∞u!');
  };

  // T·∫°o PDF
  const handleDownloadPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(16);
    doc.text('So s√°nh kh√≠ t√†i', 20, 20);
    const tableColumn = ['Thu·ªôc t√≠nh', ...selectedWeapons.map((w) => w.name)];
    const tableRows = [
      ['H√¨nh ·∫£nh', ...selectedWeapons.map(() => '')],
      ['T√™n', ...selectedWeapons.map((w) => w.name)],
      ['Lo·∫°i', ...selectedWeapons.map((w) => w.type)],
      ['T·∫ßm b·∫Øn hi·ªáu qu·∫£', ...selectedWeapons.map((w) => w.range)],
      ['T·ªëc ƒë·ªô b·∫Øn', ...selectedWeapons.map((w) => w.fireRate)],
      ['Tr·ªçng l∆∞·ª£ng', ...selectedWeapons.map((w) => w.weight)],
      ['ƒê·∫°n s·ª≠ d·ª•ng', ...selectedWeapons.map((w) => w.ammo)],
      ['Ch·∫ø ƒë·ªô b·∫Øn', ...selectedWeapons.map((w) => w.fireMode)],
      ['Ngu·ªìn g·ªëc', ...selectedWeapons.map((w) => w.origin)],
      ['Ghi ch√∫', ...selectedWeapons.map((w) => w.note)],
      ['∆Øu ƒëi·ªÉm n·ªïi b·∫≠t', ...selectedWeapons.map((w) => w.pros)],
      ['Nh∆∞·ª£c ƒëi·ªÉm', ...selectedWeapons.map((w) => w.cons)],
      ['ƒê√°nh gi√° t·ªïng th·ªÉ', ...selectedWeapons.map((w) => '‚≠ê'.repeat(w.rating))],
    ];
    doc.autoTable({
      head: [tableColumn],
      body: tableRows,
      startY: 30,
      styles: { fillColor: '#1B263B', textColor: '#FFFFFF', lineColor: '#B0BEC5', lineWidth: 0.1 },
      headStyles: { fillColor: '#2E7D32' },
    });
    doc.save('ballistics_comparison.pdf');
  };

  // ƒêi·ªÅu h∆∞·ªõng chi ti·∫øt
  const handleDetailedComparison = () => {
    navigate('/ballistics/details', { state: { weapons: selectedWeapons } });
  };

  return (
    <Box sx={{ backgroundColor: '#0D1B2A', minHeight: '100vh', padding: { xs: 2, md: 4 } }}>
      <Typography
        variant="h4"
        align="center"
        sx={{
          color: '#FFFFFF',
          fontWeight: 'bold',
          textTransform: 'uppercase',
          mb: 4,
          textShadow: '2px 2px 4px rgba(0,0,0,0.5)',
        }}
      >
        So s√°nh c√°c lo·∫°i kh√≠ t√†i
      </Typography>

      {/* B·ªô l·ªçc ch·ªçn kh√≠ t√†i */}
      <Box sx={{ display: 'flex', justifyContent: 'center', mb: 4 }}>
        <Autocomplete
          multiple
          options={weapons}
          getOptionLabel={(option) => option.name}
          value={selectedWeapons}
          onChange={handleWeaponChange}
          renderInput={(params) => (
            <TextField
              {...params}
              label="Ch·ªçn t·ªëi ƒëa 3 kh√≠ t√†i"
              variant="outlined"
              sx={{
                backgroundColor: '#1B263B',
                '& .MuiInputLabel-root': { color: '#B0BEC5' },
                '& .MuiOutlinedInput-root': {
                  '& fieldset': { borderColor: '#B0BEC5' },
                  '&:hover fieldset': { borderColor: '#4CAF50' },
                  '& .MuiInputBase-input': { color: '#FFFFFF' },
                },
              }}
            />
          )}
          renderTags={(value, getTagProps) =>
            value.map((option, index) => (
              <Chip
                key={option.id}
                label={option.name}
                {...getTagProps({ index })}
                sx={{
                  backgroundColor: '#2E7D32',
                  color: '#FFFFFF',
                  '& .MuiChip-deleteIcon': { color: '#B0BEC5' },
                }}
              />
            ))
          }
          sx={{ width: { xs: '100%', sm: '500px' } }}
          aria-label="Ch·ªçn kh√≠ t√†i ƒë·ªÉ so s√°nh"
          disableCloseOnSelect
          limitTags={3}
        />
      </Box>

      {/* B·∫£ng so s√°nh */}
      {selectedWeapons.length > 0 && (
        <ComparisonTable component={Paper}>
          <Table aria-label="B·∫£ng so s√°nh ƒë·∫°n ƒë·∫°o kh√≠ t√†i">
            <TableHead>
              <TableRow>
                <TableHeader>Thu·ªôc t√≠nh</TableHeader>
                {selectedWeapons.map((weapon) => (
                  <TableHeader key={weapon.id}>{weapon.name}</TableHeader>
                ))}
              </TableRow>
            </TableHead>
            <TableBody>
              {[
                {
                  label: 'üì∏ H√¨nh ·∫£nh',
                  key: 'image',
                  render: (weapon) => (
                    <img
                      src={weapon.image}
                      alt={weapon.name}
                      style={{ width: '80px', height: '80px', objectFit: 'cover', margin: 'auto' }}
                      loading="lazy"
                    />
                  ),
                },
                { label: 'üî§ T√™n', key: 'name' },
                { label: 'üè∑Ô∏è Lo·∫°i', key: 'type' },
                { label: 'üéØ T·∫ßm b·∫Øn hi·ªáu qu·∫£', key: 'range' },
                { label: 'üî´ T·ªëc ƒë·ªô b·∫Øn', key: 'fireRate' },
                { label: '‚öñÔ∏è Tr·ªçng l∆∞·ª£ng', key: 'weight' },
                { label: 'üí• ƒê·∫°n s·ª≠ d·ª•ng', key: 'ammo' },
                { label: 'üõ†Ô∏è Ch·∫ø ƒë·ªô b·∫Øn', key: 'fireMode' },
                { label: 'üß≠ Ngu·ªìn g·ªëc', key: 'origin' },
                { label: 'üìù Ghi ch√∫', key: 'note' },
                { label: 'üåü ∆Øu ƒëi·ªÉm n·ªïi b·∫≠t', key: 'pros' },
                { label: '‚ö†Ô∏è Nh∆∞·ª£c ƒëi·ªÉm', key: 'cons' },
                {
                  label: 'üìä ƒê√°nh gi√° t·ªïng th·ªÉ',
                  key: 'rating',
                  render: (weapon) => <Rating value={weapon.rating} readOnly size="small" />,
                },
              ].map((row) => (
                <TableRow key={row.label}>
                  <TableData>{row.label}</TableData>
                  {selectedWeapons.map((weapon) => (
                    <TableData key={weapon.id}>
                      {row.render ? row.render(weapon) : weapon[row.key]}
                    </TableData>
                  ))}
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </ComparisonTable>
      )}

      {/* N√∫t ch·ª©c nƒÉng */}
      {selectedWeapons.length > 0 && (
        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 4, flexWrap: 'wrap' }}>
          <Tooltip title="Xem ph√¢n t√≠ch ƒë·∫°n ƒë·∫°o chi ti·∫øt">
            <ActionButton
              variant="contained"
              onClick={handleDetailedComparison}
              sx={{ backgroundColor: '#4CAF50', '&:hover': { bgcolor: '#388E3C' } }}
              aria-label="So s√°nh chi ti·∫øt h∆°n"
            >
              So s√°nh chi ti·∫øt h∆°n
            </ActionButton>
          </Tooltip>
          <Tooltip title="L∆∞u v√†o danh s√°ch y√™u th√≠ch">
            <ActionButton
              variant="contained"
              onClick={handleSaveComparison}
              sx={{ backgroundColor: '#2E7D32', '&:hover': { bgcolor: '#1B5B24' } }}
              aria-label="L∆∞u b·ªô so s√°nh"
            >
              L∆∞u b·ªô so s√°nh
            </ActionButton>
          </Tooltip>
          <Tooltip title="T·∫£i b·∫£ng so s√°nh d∆∞·ªõi d·∫°ng PDF">
            <ActionButton
              variant="outlined"
              onClick={handleDownloadPDF}
              sx={{
                borderColor: '#4CAF50',
                color: '#4CAF50',
                '&:hover': { bgcolor: '#4CAF50', color: 'white' },
              }}
              aria-label="T·∫£i PDF"
            >
              T·∫£i PDF
            </ActionButton>
          </Tooltip>
        </Box>
      )}

      {/* Animation CSS */}
      <style>{`
        @keyframes fadeIn {
          0% { opacity: 0; transform: translateY(20px); }
          100% { opacity: 1; transform: translateY(0); }
        }
        .fade-in {
          animation: fadeIn 0.6s ease-in-out;
        }
      `}</style>
    </Box>
  );
};

export default BallisticsPage;