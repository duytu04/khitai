



import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Helmet } from 'react-helmet';
import { weapons } from '../data/weapons';
import usePagination from '../hooks/usePagination';
import { Breadcrumbs, Link as MUILink } from '@mui/material';
import HomeIcon from '@mui/icons-material/Home';

import {
  Box,
  Typography,
  Card,
  CardContent,
  CardMedia,
  Grid,
  Pagination,
  Tooltip,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Skeleton,
} from '@mui/material';
import { styled } from '@mui/material/styles';

// Th√†nh ph·∫ßn styled
const WeaponCard = styled(Card)(({ theme }) => ({
  backgroundColor: '#1B263B',
  color: '#FFFFFF',
  height: '300px',
  borderRadius: '10px',
  overflow: 'hidden',
  transition: 'transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease',
  animation: 'slideUp 0.8s ease-in-out',
  '&:hover': {
    transform: 'translateY(-5px) scale(1.02)',
    boxShadow: '0 8px 20px rgba(0,0,0,0.5)',
    backgroundColor: '#2E7D32',
  },
  '&:focus': {
    outline: '2px solid #4CAF50',
    outlineOffset: 2,
  },
}));

const SectionTitle = styled(Typography)(({ theme }) => ({
  color: '#FFFFFF',
  fontWeight: 'bold',
  textTransform: 'uppercase',
  letterSpacing: 2,
  animation: 'fadeIn 1s ease-in-out',
  transition: 'color 0.3s ease',
  '&:hover': { color: '#4CAF50' },
}));

const WeaponListPage = () => {
  const { category } = useParams();
  const navigate = useNavigate();
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState('all');
  const [subFilterType, setSubFilterType] = useState('all');
  const [isLoading, setIsLoading] = useState(true);

  const routeMap = {
    'Kh√≠ t√†i h·∫£i qu√¢n': '/weapons/naval',
    'Kh√≠ t√†i kh√¥ng qu√¢n': '/weapons/airforce',
    'Kh√≠ t√†i m·∫∑t ƒë·∫•t': '/weapons/ground',
    'Kh√≠ t√†i h√≥a h·ªçc & sinh h·ªçc': '/weapons/chemical',
    'Kh√≠ t√†i chi·∫øn tranh ƒëi·ªán t·ª≠': '/weapons/electronic',
    'Kh√≠ t√†i v≈© kh√≠ h·∫°t nh√¢n': '/weapons/nuclear',
    'Kh√≠ t√†i chi·∫øn tranh ƒë·∫∑c bi·ªát': '/weapons/special',
    'Kh√≠ t√†i chi·∫øn tranh m·∫°ng': '/weapons/cyber',
    'Kh√≠ t√†i qu√¢n s·ª± c·ª° nh·ªè': '/weapons/small-arms',
    'Kh√≠ t√†i ch·ªëng tƒÉng': '/weapons/anti-tank',
    'Kh√≠ t√†i kh√¥ng gian': '/weapons/space',
    'Kh√≠ t√†i h·ªó tr·ª£ chi·∫øn ƒë·∫•u': '/weapons/support',
    'Kh√≠ t√†i t√°c chi·∫øn ƒë·∫∑c bi·ªát': '/weapons/special-ops',
    'UAV': '/weapons/drones',
    'Tank': '/weapons/ground/tank',
  };

  const subCategoryMap = {
    'Kh√≠ t√†i h·∫£i qu√¢n': ['T·∫•t c·∫£', 'T√†u chi·∫øn', 'T√†u ng·∫ßm', 'T√†u s√¢n bay', 'T√†u h·ªô t·ªëng'],
    'UAV': ['T·∫•t c·∫£', 'UAV trinh s√°t', 'UAV chi·∫øn ƒë·∫•u', 'UAV ƒëa nhi·ªám'],
    'Tank': ['T·∫•t c·∫£', 'Xe tƒÉng ch·ªß l·ª±c', 'Xe tƒÉng h·∫°ng nh·∫π', 'Xe tƒÉng h·ªó tr·ª£'],
    'Kh√≠ t√†i kh√¥ng qu√¢n': ['T·∫•t c·∫£', 'M√°y bay chi·∫øn ƒë·∫•u', 'M√°y bay n√©m bom', 'M√°y bay v·∫≠n t·∫£i'],
    'Kh√≠ t√†i m·∫∑t ƒë·∫•t': ['T·∫•t c·∫£', 'Ph√°o binh', 'Xe b·ªçc th√©p', 'H·ªá th·ªëng ph√≤ng kh√¥ng'],
    'Kh√≠ t√†i h√≥a h·ªçc & sinh h·ªçc': ['T·∫•t c·∫£', 'V≈© kh√≠ h√≥a h·ªçc', 'V≈© kh√≠ sinh h·ªçc'],
    'Kh√≠ t√†i chi·∫øn tranh ƒëi·ªán t·ª≠': ['T·∫•t c·∫£', 'Radar', 'H·ªá th·ªëng g√¢y nhi·ªÖu', 'H·ªá th·ªëng gi√°m s√°t'],
    'Kh√≠ t√†i v≈© kh√≠ h·∫°t nh√¢n': ['T·∫•t c·∫£', 'T√™n l·ª≠a h·∫°t nh√¢n', 'Bom h·∫°t nh√¢n'],
    'Kh√≠ t√†i chi·∫øn tranh ƒë·∫∑c bi·ªát': ['T·∫•t c·∫£', 'V≈© kh√≠ ƒë·∫∑c nhi·ªám', 'Thi·∫øt b·ªã ng·ª•y trang'],
    'Kh√≠ t√†i chi·∫øn tranh m·∫°ng': ['T·∫•t c·∫£', 'Ph·∫ßn m·ªÅm t·∫•n c√¥ng', 'H·ªá th·ªëng ph√≤ng th·ªß m·∫°ng'],
    'Kh√≠ t√†i qu√¢n s·ª± c·ª° nh·ªè': ['T·∫•t c·∫£', 'S√∫ng tr∆∞·ªùng', 'S√∫ng ng·∫Øn', 'S√∫ng m√°y'],
    'Kh√≠ t√†i ch·ªëng tƒÉng': ['T·∫•t c·∫£', 'T√™n l·ª≠a ch·ªëng tƒÉng', 'M√¨n ch·ªëng tƒÉng'],
    'Kh√≠ t√†i kh√¥ng gian': ['T·∫•t c·∫£', 'V·ªá tinh qu√¢n s·ª±', 'T√™n l·ª≠a kh√¥ng gian'],
    'Kh√≠ t√†i h·ªó tr·ª£ chi·∫øn ƒë·∫•u': ['T·∫•t c·∫£', 'Xe c·ª©u th∆∞∆°ng', 'Xe h·∫≠u c·∫ßn'],
    'Kh√≠ t√†i t√°c chi·∫øn ƒë·∫∑c bi·ªát': ['T·∫•t c·∫£', 'Thi·∫øt b·ªã ƒë·∫∑c nhi·ªám', 'V≈© kh√≠ phi s√°t th∆∞∆°ng'],
  };

  const filteredWeapons = weapons
    .filter((weapon) => !category || weapon.category.toLowerCase() === category)
    .filter((weapon) => weapon.name.toLowerCase().includes(searchTerm.toLowerCase()))
    .filter((weapon) => subFilterType === 'all' || subFilterType === 'T·∫•t c·∫£' || weapon.subCategory === subFilterType);

  const { currentItems, currentPage, totalPages, goToPage } = usePagination(filteredWeapons, 4);

  useEffect(() => {
    setTimeout(() => setIsLoading(false), 1000); // Gi·∫£ l·∫≠p t·∫£i d·ªØ li·ªáu
  }, []);

  const handlePageChange = (event, newPage) => {
    goToPage(newPage);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleCardKeyDown = (e, id) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      navigate(`/weapons/${id}`);
    }
  };

  const handleFilterChange = (event) => {
    const selected = event.target.value;
    setFilterType(selected);
    setSubFilterType('all'); // Reset sub-filter khi thay ƒë·ªïi filter ch√≠nh
    if (routeMap[selected]) {
      navigate(routeMap[selected]);
    }
  };

  const handleSubFilterChange = (event) => {
    setSubFilterType(event.target.value);
  };

  return (
    <Box sx={{ backgroundColor: '#0D1B2A', minHeight: '100vh', padding: { xs: 2, md: 4 } }}>
      <Helmet>
        <title>{category ? `Kh√≠ t√†i ${category.toUpperCase()}` : 'Danh s√°ch kh√≠ t√†i'}</title>
        <meta
          name="description"
          content={`Kh√°m ph√° danh s√°ch kh√≠ t√†i ${category || 'qu√¢n s·ª±'} nh∆∞ UAV, xe tƒÉng, t√†u chi·∫øn.`}
        />
        <meta property="og:title" content={category ? `Kh√≠ t√†i ${category.toUpperCase()}` : 'Danh s√°ch kh√≠ t√†i'} />
        <meta property="og:description" content="Kh√°m ph√° c√°c kh√≠ t√†i qu√¢n s·ª± hi·ªán ƒë·∫°i nh∆∞ UAV, xe tƒÉng, t√†u chi·∫øn." />
      </Helmet>
<Box sx={{ color: '#B0BEC5', mb: 2 }}>
  <Breadcrumbs aria-label="breadcrumb" separator="‚Ä∫">
    <MUILink
      underline="hover"
      color="inherit"
      onClick={() => navigate('/')}
      sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}
    >
      <HomeIcon sx={{ mr: 0.5 }} fontSize="inherit" />
      Trang ch·ªß
    </MUILink>
    <MUILink
      underline="hover"
      color="inherit"
      onClick={() => navigate('/weapons')}
      sx={{ cursor: 'pointer' }}
    >
      Danh s√°ch kh√≠ t√†i
    </MUILink>
    {category && (
      <Typography color="text.primary" sx={{ color: '#FFFFFF' }}>
        {category}
      </Typography>
    )}
  </Breadcrumbs>
</Box>

      <SectionTitle
      
        variant="h4"
        align="center"
        gutterBottom
        sx={{ fontSize: { xs: '2rem', md: '3rem' }, textShadow: '3px 3px 6px rgba(0,0,0,0.8)' }}
      >
        {category ? `Danh s√°ch ${category.toUpperCase()}` : 'Danh s√°ch kh√≠ t√†i'}
      </SectionTitle>

      {/* B·ªô l·ªçc v√† t√¨m ki·∫øm */}
      <Box
  sx={{
    display: 'flex',
    gap: 2,
    mb: 4,
    justifyContent: { xs: 'center', sm: 'flex-start' }, // Center tr√™n mobile, tr√°i tr√™n desktop
    flexWrap: 'wrap',
  }}
>

        <TextField
          label="T√¨m ki·∫øm kh√≠ t√†i"
          variant="outlined"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          sx={{
            backgroundColor: '#1B263B',
            input: { color: '#FFFFFF' },
            '& .MuiInputLabel-root': { color: '#B0BEC5' },
            '& .MuiOutlinedInput-root': {
              '& fieldset': { borderColor: '#B0BEC5' },
              '&:hover fieldset': { borderColor: '#4CAF50' },
            },
            width: { xs: '100%', sm: '300px' },
          }}
          aria-label="T√¨m ki·∫øm kh√≠ t√†i theo t√™n"
        />
        <FormControl sx={{ minWidth: 120, width: { xs: '100%', sm: '200px' } }}>
          <InputLabel id="filter-type-label" sx={{ color: '#B0BEC5' }}>
            Lo·∫°i
          </InputLabel>
          <Select
  labelId="filter-type-label"
  value={filterType}
  onChange={handleFilterChange}
  MenuProps={{
    PaperProps: {
      style: {
        maxHeight: 250, // üëà Gi·ªõi h·∫°n chi·ªÅu cao dropdown, s·∫Ω cu·ªôn n·∫øu v∆∞·ª£t qu√°
      },
    },
  }}
  sx={{
    backgroundColor: '#1B263B',
    color: '#FFFFFF',
    '& .MuiSvgIcon-root': { color: '#B0BEC5' },
    '& .MuiOutlinedInput-notchedOutline': { borderColor: '#B0BEC5' },
    '&:hover .MuiOutlinedInput-notchedOutline': { borderColor: '#4CAF50' },
  }}
  aria-label="L·ªçc theo lo·∫°i kh√≠ t√†i"
  aria-describedby="filter-type-description"
>
  <MenuItem value="all">T·∫•t c·∫£</MenuItem>
  <MenuItem value="UAV">UAV</MenuItem>
  <MenuItem value="Tank">Xe tƒÉng</MenuItem>
  <MenuItem value="Kh√≠ t√†i h·∫£i qu√¢n">Kh√≠ t√†i h·∫£i qu√¢n</MenuItem>
  <MenuItem value="Kh√≠ t√†i kh√¥ng qu√¢n">Kh√≠ t√†i kh√¥ng qu√¢n</MenuItem>
  <MenuItem value="Kh√≠ t√†i m·∫∑t ƒë·∫•t">Kh√≠ t√†i m·∫∑t ƒë·∫•t</MenuItem>
  <MenuItem value="Kh√≠ t√†i h√≥a h·ªçc & sinh h·ªçc">Kh√≠ t√†i h√≥a h·ªçc & sinh h·ªçc</MenuItem>
  <MenuItem value="Kh√≠ t√†i chi·∫øn tranh ƒëi·ªán t·ª≠">Kh√≠ t√†i chi·∫øn tranh ƒëi·ªán t·ª≠</MenuItem>
  <MenuItem value="Kh√≠ t√†i v≈© kh√≠ h·∫°t nh√¢n">Kh√≠ t√†i v≈© kh√≠ h·∫°t nh√¢n</MenuItem>
  <MenuItem value="Kh√≠ t√†i chi·∫øn tranh ƒë·∫∑c bi·ªát">Kh√≠ t√†i chi·∫øn tranh ƒë·∫∑c bi·ªát</MenuItem>
  <MenuItem value="Kh√≠ t√†i chi·∫øn tranh m·∫°ng">Kh√≠ t√†i chi·∫øn tranh m·∫°ng</MenuItem>
  <MenuItem value="Kh√≠ t√†i qu√¢n s·ª± c·ª° nh·ªè">Kh√≠ t√†i qu√¢n s·ª± c·ª° nh·ªè</MenuItem>
  <MenuItem value="Kh√≠ t√†i ch·ªëng tƒÉng">Kh√≠ t√†i ch·ªëng tƒÉng</MenuItem>
  <MenuItem value="Kh√≠ t√†i kh√¥ng gian">Kh√≠ t√†i kh√¥ng gian</MenuItem>
  <MenuItem value="Kh√≠ t√†i h·ªó tr·ª£ chi·∫øn ƒë·∫•u">Kh√≠ t√†i h·ªó tr·ª£ chi·∫øn ƒë·∫•u</MenuItem>
  <MenuItem value="Kh√≠ t√†i t√°c chi·∫øn ƒë·∫∑c bi·ªát">Kh√≠ t√†i t√°c chi·∫øn ƒë·∫∑c bi·ªát</MenuItem>
</Select>

          <Typography id="filter-type-description" sx={{ display: 'none' }}>
            L·ªçc danh s√°ch kh√≠ t√†i theo danh m·ª•c nh∆∞ UAV, xe tƒÉng, t√†u chi·∫øn, v.v.
          </Typography>
        </FormControl>
        {filterType !== 'all' && subCategoryMap[filterType] && (
          <FormControl sx={{ minWidth: 120, width: { xs: '100%', sm: '200px' } }}>
            <InputLabel id="sub-filter-type-label" sx={{ color: '#B0BEC5' }}>
              Ph√¢n lo·∫°i
            </InputLabel>
            <Select
              labelId="sub-filter-type-label"
              value={subFilterType}
              onChange={handleSubFilterChange}
              sx={{
                backgroundColor: '#1B263B',
                color: '#FFFFFF',
                '& .MuiSvgIcon-root': { color: '#B0BEC5' },
                '& .MuiOutlinedInput-notchedOutline': { borderColor: '#B0BEC5' },
                '&:hover .MuiOutlinedInput-notchedOutline': { borderColor: '#4CAF50' },
              }}
              aria-label="L·ªçc theo ph√¢n lo·∫°i kh√≠ t√†i"
              aria-describedby="sub-filter-type-description"
            >
              {subCategoryMap[filterType].map((subCategory) => (
                <MenuItem key={subCategory} value={subCategory}>
                  {subCategory}
                </MenuItem>
              ))}
            </Select>
            <Typography id="sub-filter-type-description" sx={{ display: 'none' }}>
              L·ªçc chi ti·∫øt danh s√°ch kh√≠ t√†i theo ph√¢n lo·∫°i nh∆∞ t√†u chi·∫øn, UAV chi·∫øn ƒë·∫•u, v.v.
            </Typography>
          </FormControl>
        )}
      </Box>

      {/* Danh s√°ch kh√≠ t√†i */}
      {isLoading ? (
        <Grid container spacing={3}>
          {[...Array(4)].map((_, index) => (
            <Grid item xs={12} sm={6} md={4} lg={3} key={index}>
              <Skeleton variant="rectangular" height={300} sx={{ borderRadius: '10px', bgcolor: '#1B263B' }} />
            </Grid>
          ))}
        </Grid>
      ) : (
        <Grid container spacing={3} sx={{ mt: 2 }}>
          {currentItems.length > 0 ? (
            currentItems.map((weapon) => (
              <Grid item xs={12} sm={6} md={4} lg={3} key={weapon.id}>
                <Tooltip title={`Xem chi ti·∫øt ${weapon.name}`} arrow>
                  <WeaponCard
                    sx={{ cursor: 'pointer' }}
                    onClick={() => navigate(`/weapons/${weapon.id}`)}
                    onKeyDown={(e) => handleCardKeyDown(e, weapon.id)}
                    tabIndex={0}
                    role="button"
                    aria-label={`Xem chi ti·∫øt ${weapon.name}`}
                    aria-describedby={`weapon-details-${weapon.id}`}
                  >
                    {weapon.image && (
                      <CardMedia
                        component="img"
                        height="150"
                        image={weapon.image || 'https://via.placeholder.com/150'}
                        alt={weapon.name}
                        loading="lazy"
                        sx={{
                          objectFit: 'cover',
                          transition: 'transform 0.3s ease',
                          '&:hover': { transform: 'scale(1.05)' },
                        }}
                      />
                    )}
                    <CardContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>
                      <Typography id={`weapon-details-${weapon.id}`} sx={{ display: 'none' }}>
                        {`Kh√≠ t√†i ${weapon.name}, thu·ªôc danh m·ª•c ${weapon.category}, ph√¢n lo·∫°i: ${weapon.subCategory || 'Kh√¥ng c√≥'}. Th√¥ng s·ªë: ${JSON.stringify(weapon.technicalDetails)}`}
                      </Typography>
                      <Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>
                        {weapon.name}
                      </Typography>
                      <Typography variant="body2" sx={{ color: '#B0BEC5', mt: 1 }}>
                        {weapon.category}
                      </Typography>
                      {weapon.subCategory && (
                        <Typography variant="body2" sx={{ color: '#B0BEC5', mt: 0.5 }}>
                          Ph√¢n lo·∫°i: {weapon.subCategory}
                        </Typography>
                      )}
                      {weapon.technicalDetails && (
                        <Box sx={{ mt: 1 }}>
                          {weapon.technicalDetails.weight && (
                            <Typography variant="body2" sx={{ color: '#B0BEC5' }}>
                              Tr·ªçng l∆∞·ª£ng: {weapon.technicalDetails.weight}
                            </Typography>
                          )}
                          {weapon.technicalDetails.speed && (
                            <Typography variant="body2" sx={{ color: '#B0BEC5' }}>
                              T·ªëc ƒë·ªô: {weapon.technicalDetails.speed}
                            </Typography>
                          )}
                          {weapon.technicalDetails.range && (
                            <Typography variant="body2" sx={{ color: '#B0BEC5' }}>
                              T·∫ßm b·∫Øn: {weapon.technicalDetails.range}
                            </Typography>
                          )}
                        </Box>
                      )}
                    </CardContent>
                  </WeaponCard>
                </Tooltip>
              </Grid>
            ))
          ) : (
            <Grid item xs={12}>
              <Typography align="center" sx={{ color: '#B0BEC5' }}>
                Kh√¥ng t√¨m th·∫•y kh√≠ t√†i n√†o.
              </Typography>
            </Grid>
          )}
        </Grid>
      )}

      {/* Ph√¢n trang */}
      {totalPages > 1 && (
        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 6, pb: 4 }}>
          <Pagination
            count={totalPages}
            page={currentPage}
            onChange={handlePageChange}
            sx={{
              '& .MuiPaginationItem-root': {
                color: '#B0BEC5',
                '&:hover': { backgroundColor: '#2E7D32', color: '#FFFFFF' },
              },
              '& .Mui-selected': { backgroundColor: '#4CAF50 !important', color: '#FFFFFF' },
            }}
            showFirstButton
            showLastButton
            aria-label="ƒêi·ªÅu h∆∞·ªõng ph√¢n trang"
          />
        </Box>
      )}

      {/* CSS Animation */}
      <style>{`
        @keyframes fadeIn {
          0% { opacity: 0; transform: translateY(20px); }
          100% { opacity: 1; transform: translateY(0); }
        }
        @keyframes slideUp {
          0% { opacity: 0; transform: translateY(30px); }
          100% { opacity: 1; transform: translateY(0); }
        }
      `}</style>
    </Box>
  );
};

export default WeaponListPage;





